#include <WiFi.h>
#include <HTTPClient.h>
#include <TFT_eSPI.h>
#include <TJpg_Decoder.h>

// WiFi credentials
const char *ssid = "Demo";
const char *password = "ejieflorida";

// JPEG stream URL (served from camera or server)
const char *stream_url = "http://192.168.161.49/frame.jpg";

// Display setup
TFT_eSPI tft = TFT_eSPI();

// JPEG buffer
#define JPEG_BUF_SIZE 8192
uint8_t jpegBuffer[JPEG_BUF_SIZE];

// Custom min function to avoid template issues
size_t custom_min(size_t a, size_t b) {
  return (a < b) ? a : b;
}

// âœ… Corrected Callback Signature for TJpg_Decoder
bool tft_output(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t *bitmap) {
  if (y >= tft.height()) return false;
  tft.pushImage(x, y, w, h, bitmap);
  return true;
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("[SYSTEM] Initializing TFT...");
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(1);
  tft.setCursor(0, 0);
  tft.println("Initializing...");

  Serial.println("[SYSTEM] Setting up JPEG decoder...");
  TJpgDec.setJpgScale(1);
  TJpgDec.setSwapBytes(true);
  TJpgDec.setCallback(tft_output);

  Serial.print("[WIFI] Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  tft.println("Connecting to WiFi");

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 20000) {
    delay(500);
    Serial.print(".");
    tft.print(".");
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n[WIFI] Connection failed!");
    tft.fillScreen(TFT_RED);
    tft.setCursor(0, 0);
    tft.println("WiFi Connection Failed");
    while (true) {
      delay(1000);
    }
  }

  Serial.println("\n[WIFI] Connected successfully!");
  Serial.print("[WIFI] IP Address: ");
  Serial.println(WiFi.localIP());
  tft.println("\nConnected!");
  tft.println("IP: " + WiFi.localIP().toString());
}

void loop() {
  static unsigned long lastAttempt = 0;

  if (millis() - lastAttempt < 2000) {
    delay(100);
    return;
  }
  lastAttempt = millis();

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("[WIFI] Lost connection, attempting reconnect...");
    WiFi.reconnect();
    delay(5000);
    return;
  }

  HTTPClient http;
  http.setTimeout(10000);
  http.begin(stream_url);

  Serial.println("[HTTP] Fetching JPEG frame...");
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 0);
  tft.println("Fetching frame...");

  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    WiFiClient *stream = http.getStreamPtr();
    size_t totalBytesRead = 0;

    while (stream->available() && totalBytesRead < JPEG_BUF_SIZE) {
      size_t toRead = custom_min((size_t)1024, JPEG_BUF_SIZE - totalBytesRead);
      size_t bytesRead = stream->readBytes(jpegBuffer + totalBytesRead, toRead);
      totalBytesRead += bytesRead;

      Serial.printf("[STREAM] Read %d bytes (total: %d)\n", (int)bytesRead, (int)totalBytesRead);
    }

    if (totalBytesRead > 0) {
      Serial.println("[DECODE] Attempting to decode JPEG...");
      JRESULT result = TJpgDec.drawJpg(0, 0, jpegBuffer, totalBytesRead);
      if (result != JDR_OK) {
        Serial.printf("[ERROR] JPEG decode error: %d\n", result);
        tft.fillScreen(TFT_RED);
        tft.setCursor(0, 0);
        tft.printf("Decode error: %d", result);
      } else {
        Serial.println("[DECODE] JPEG displayed successfully.");
      }
    } else {
      Serial.println("[ERROR] No data read from stream.");
      tft.fillScreen(TFT_RED);
      tft.setCursor(0, 0);
      tft.println("No data from stream");
    }

  } else {
    Serial.printf("[HTTP] GET failed. Code: %d\n", httpCode);
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(0, 0);
    tft.println("HTTP Error:");
    tft.println(http.errorToString(httpCode));
  }

  http.end();
}
